#!/usr/bin/perl
# +----------------------------------------------------------------------------+
# | MyFarm v0.3 * Web interface for remote monitoring MMxD devices             |
# | Copyright (C) 2019-2022 Pozs√°r Zsolt <pozsar.zsolt@szerafingomba.hu>       |
# | myfarm-client                                                              |
# | Main program                                                               |
# +----------------------------------------------------------------------------+
#
#   This program is free software: you can redistribute it and/or modify it
# under the terms of the European Union Public License 1.1 version.
#
#   This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.

use Data::UUID;
use File::Compare;
use WWW::Mechanize;
use Switch;
use strict;
#use warnings;

my $name = "MyFarm Client";
my $version = "v0.3";
my $cgi;
my $channel;
my $conffile;
my $datafile;
my $lockfile;
my $tmpfile1;
my $tmpfile2;
my $type;
my $uuid;

my @n;
my $i;
for $i (0..24)
{
  $n[$i] = "";
}

# load own configuration file
sub loadmyfarmconf
{
#  my $colnum;
  my $row;
  my ($inifile) = @_;
  if (-e $inifile)
  {
    open CONF, "< $inifile";
    while (<CONF>)
    {
      chop;
      my(@columns) = split("=");
      my($colnum) = $#columns;
      $row = "";
      foreach $colnum (@columns)
      {
        $row = $row . $colnum;
      }
      my(@datarow) = split("\"\"",$row);
      my($datarownum) = $#datarow;
      for $i (0..24)
      {
        if ($columns[0] eq "n" . $i ) { $n[$i] = $columns[1]; }
      }
      switch ($columns[0])
      {
        case "cgi"      { $cgi = $columns[1]; }
        case "conffile" { $conffile = $columns[1]; }
        case "type"     { $type = $columns[1]; }
        case "uuid"     { $uuid = $columns[1]; }
        case "channel"  { $channel = $columns[1]; }
      }
    }
    close CONF;
    $type = lc($type);
    if (($type ne "mm3d") && ($type ne "mm5d") && ($type ne "mm8d"))
    {
      print "ERROR #2\n";
      print "Type" . $type . "is not valid in " . $inifile . " configuration file.";
      exit 2;
    }
  } else
  {
    print "ERROR #1\n";
    print "Cannot open ",$inifile," configuration file!\n";
    exit 1;
  }
}

# load configuration
sub loadconf()
{
#  my $channel;
  my $colnum;
  my $dir_lck;
  my $dir_log;
  my $row;
  if (-e $conffile)
  {
    open CONF, "< $conffile";
    while (<CONF>)
    {
      chop;
      my(@columns) = split("=");
      my($colnum) = $#columns;
      $row = "";
      foreach $colnum (@columns)
      {
        $row = $row . $colnum;
      }
      my(@datarow) = split("\"\"",$row);
      my($datarownum) = $#datarow;
      switch ($columns[0])
      {
        case "dir_lck" { $dir_lck = $columns[1]; }
        case "dir_log" { $dir_log = $columns[1]; }
      }
    }
    close CONF;
    if ($type eq "mm8d")
    {
      $datafile = $dir_log . "/" . $type . "-ch" . $channel . ".log";
      $lockfile = $dir_lck . "/" . $type . ".lock";
    } else
    {
      $datafile = $dir_log . "/" . $type . ".log";
      $lockfile = $dir_lck . "/" . $type . ".lock";
    }
  } else
  {
    print "ERROR #3\n";
    print "Cannot open ",$conffile," configuration file!\n";
    exit 3;
  }
}

# create UUID
sub createuuid()
{
  my $ug = Data::UUID -> new;
  my $newuuid = $ug -> create_str();
  print $newuuid . "\n";
  exit 0;
}

# UUID registration
sub registration()
{
  my $mech = WWW::Mechanize -> new(agent => $name . "/" . $version);
  my $url = $cgi . "?cmd=reg&uuid=" . $uuid;
  $mech -> get($url);
  print $mech -> content;
  exit 0;
}

# UUID unregistration
sub unregistration()
{
  my $mech = WWW::Mechanize -> new(agent => $name . "/" . $version);
  my $url = $cgi . "?cmd=unreg&uuid=" . $uuid;
  $mech -> get($url);
  print $mech -> content;
  exit 0;
}

# upload names
sub uploadnames()
{
  loadconf;
  my $mech = WWW::Mechanize -> new(agent => $name . "/" . $version);
  my $url = $cgi . "?cmd=name&uuid=" . $uuid;
  for $i (0..24)
  {
    if ($n[$i] ne "") { $url = $url . "&" . $i . "=" . $n[$i]; }
  }
  $mech -> get($url);
  print $mech -> content;
  exit 0;
}

# upload data
sub uploaddata()
{
  my $colnum;
  my $row;
  my $s = "";
  my $tmpstr;
  loadconf;
  if ($type eq "mm8d")
  {
    $tmpfile1 = "/tmp/myfarm-client-" . $type . "-" . $channel . "-1.tmp";
    $tmpfile2 = "/tmp/myfarm-client-" . $type . "-" . $channel . "-2.tmp";
  } else
  {
    $tmpfile1 = "/tmp/myfarm-client-" . $type . "-1.tmp";
    $tmpfile2 = "/tmp/myfarm-client-" . $type . "-2.tmp";
  }
  while (-e $lockfile)
  {
    sleep 1;
  }
  if (-e $datafile)
  {
    open DATA, "< $datafile";
    while (<DATA>)
    {
      chop;
      my(@columns) = split(",");
      my($colnum) = $#columns;
      $row = "";
      foreach $colnum (@columns)
      {
        $row = $row . $colnum;
      }
      my(@datarow) = split("\"\"",$row);
      my($datarownum) = $#datarow;
      if ($type eq "mm8d")
      {
        if ($channel eq "0")
        {
          #     0        1   2 3 4 5  6 7 8
          # 2020-09-19,13:15,0,0,0,31,0,0,0
          #                  R R R    Y Y Y
          for $i (2..8)
          {
            $s = $columns[$i];
            if (($i < 9) && ($i > 5))
            {
              if ($s eq "0") {$s = "D"}
              if ($s eq "1") {$s = "Y"}
            }
            if (($i < 5) && ($i > 1))
            {
              if ($s eq "0") {$s = "D"}
              if ($s eq "1") {$s = "R"}
            }
            $tmpstr = $tmpstr . ($i+1) . "=" . $s;
            if ($i < 8) { $tmpstr = $tmpstr . "&"; }
          }
        } else
        { 
          #                                    1 1
          #     0        1   2  3  4 5 6 7 8 9 0 1
          # 2020-09-19,13:59,13,88,3,1,1,1,0,1,1,1
          #                          M Y R R Y Y Y
          #                          H
          for $i (2..11)
          {
            $s = $columns[$i];
            if ($i == 5)
            {
             if ($s eq "0") {$s = "M"}
             if ($s eq "1") {$s = "H"}
            }
            if (($i == 6 ) || ($i > 8))
            {
              if ($s eq "0") {$s = "D"}
              if ($s eq "1") {$s = "Y"}
            }
            if (($i < 9) && ($i > 6))
            {
              if ($s eq "0") {$s = "D"}
              if ($s eq "1") {$s = "R"}
            }
            $tmpstr = $tmpstr . ($i+1) . "=" . $s;
            if ($i < 11) { $tmpstr = $tmpstr . "&"; }
          }
        }
      }
      if ($type eq "mm5d")
      {
        #                                      1 1 1 1 1 1
        #     0        1   2  3  4 5 6 7 8 9 0 1 2 3 4 5 6
        # 2022-04-09,16:30,14,91,H,0,1,0,0,0,1,0,1,0,0,0,0
        #                          G G G G Y Y Y Y R R R R
        for $i (2..16)
        {
          $s = $columns[$i];
          if ($i == 4)
          {
           if ($s eq "0") {$s = "M"}
           if ($s eq "1") {$s = "H"}
          }
          if (($i < 9) && ($i > 4))
          {
           if ($s eq "0") {$s = "D"}
           if ($s eq "1") {$s = "G"}
          }
          if (($i < 13) && ($i > 8))
          {
            if ($s eq "0") {$s = "D"}
            if ($s eq "1") {$s = "Y"}
          }
          if (($i < 17) && ($i > 12))
          {
            if ($s eq "0") {$s = "D"}
            if ($s eq "1") {$s = "R"}
          }
          $tmpstr = $tmpstr . ($i+1) . "=" . $s;
          if ($i < 16) { $tmpstr = $tmpstr . "&"; }
        }
      }
      if ($type eq "mm3d")
      {
        #                                        1 1 1 1 1 1
        #     0        1     2    3  4 5 6 7 8 9 0 1 2 3 4 5
        # 2022-04-09,16:30,14.0,91.0,0,1,0,0,0,1,0,1,0,0,0,0
        #                            G G G G Y Y Y Y R R R R
        for $i (2..15)
        {
          $s = $columns[$i];
          if (($i < 8) && ($i > 3))
          {
           if ($s eq "0") {$s = "D"}
           if ($s eq "1") {$s = "G"}
          }
          if (($i < 12) && ($i > 7))
          {
            if ($s eq "0") {$s = "D"}
            if ($s eq "1") {$s = "Y"}
          }
          if (($i < 16) && ($i > 11))
          {
            if ($s eq "0") {$s = "D"}
            if ($s eq "1") {$s = "R"}
          }
          $tmpstr = $tmpstr . ($i+1) . "=" . $s;
          if ($i < 15) { $tmpstr = $tmpstr . "&"; }
        }
      }
      if ( -e $tmpfile1)
      {
        open(TMP2, '>', $tmpfile2);
        print TMP2 $tmpstr;
        close TMP2;
        if (compare ($tmpfile1,$tmpfile2) != 0)
        {
          my $mech = WWW::Mechanize -> new(agent => $name . "/" . $version);
          my $url = $cgi . "?cmd=value&uuid=" . $uuid . "&0=" . $n[0] . "&1=" . $columns[0] . "&2=" . $columns[1] . "&" . $tmpstr;
          $mech -> get($url);
          print $mech -> content;
          rename ($tmpfile2,$tmpfile1);
        }
      } else
      {
        open(TMP1, '>', $tmpfile1);
        print TMP1 $tmpstr;
        close TMP1;
        my $mech = WWW::Mechanize -> new(agent => $name . "/" . $version);
        my $url = $cgi . "?cmd=value&uuid=" . $uuid . "&0=" . $n[0] . "&1=" . $columns[0] . "&2=" . $columns[1] . "&" . $tmpstr;
        $mech -> get($url);
        print $mech -> content;
      }
      last;
    }
    close DATA;
    exit 0;
  } else
  {
    print "ERROR #3\n";
    print "Cannot open ",$datafile," data file!\n";
    exit 4;
  }
}

# write usage
sub showhelp()
{
  print "\n";
  print "Usage:\n";
  print "  " . $0 . " [parameter]\n";
  print "\n";
  print "Valid parameters:\n";
  print "  -c                 create UUID and write into standard output\n";
  print "  -h                 show usage of this script\n";
  print "  -v                 show version information\n";
  print "  --create-uuid      create UUID and write into standard output\n";
  print "  --help             show usage of this script\n";
  print "  --version          show version information\n";
  print "\n";
  print "  " . $0 . " [parameter] /path/myfarm.ini\n";
  print "\n";
  print "Valid parameters:\n";
  print "  -d                 upload data to server\n";
  print "  -n                 upload names to server\n";
  print "  -r                 registrate your UUID\n";
  print "  -u                 unregistrate your UUID\n";
  print "  --registration     registrate your UUID\n";
  print "  --unregistration   unregistrate your UUID\n";
  print "  --upload-data      upload data to server\n";
  print "  --upload-names     upload names to server\n";
  print "\n";
  exit 0;
}

# write version information
sub showversion()
{
  print $name . $version . "\n";
  exit 0;
}
# main function
if ($#ARGV == 0)
{
  switch ($ARGV[0])
  {
    case  "-c"               { createuuid; }
    case  "-h"               { showhelp; }
    case  "-v"               { showversion; }
    case  "--create-uuid"    { createuuid; }
    case  "--help"           { showhelp; }
    case  "--version"        { showversion; }
  }
}
if ($#ARGV == 1)
{
  loadmyfarmconf($ARGV[1]);
  switch ($ARGV[0])
  {
    case  "-d"               { uploaddata; }
    case  "-n"               { uploadnames; }
    case  "-r"               { registration; }
    case  "-u"               { unregistration; }
    case  "--registration"   { registration; }
    case  "--unregistration" { unregistration; }
    case  "--upload-data"    { uploaddata; }
    case  "--upload-names"   { uploadnames; }
  }
}
print "Use -h or --help to show valid command line parameters.\n";
exit 0;
